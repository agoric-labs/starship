// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: exposer/service.proto

package exposer

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	_ "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResponseNodeID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseNodeID) Reset() {
	*x = ResponseNodeID{}
	mi := &file_exposer_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseNodeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseNodeID) ProtoMessage() {}

func (x *ResponseNodeID) ProtoReflect() protoreflect.Message {
	mi := &file_exposer_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseNodeID.ProtoReflect.Descriptor instead.
func (*ResponseNodeID) Descriptor() ([]byte, []int) {
	return file_exposer_service_proto_rawDescGZIP(), []int{0}
}

func (x *ResponseNodeID) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type ResponsePubKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponsePubKey) Reset() {
	*x = ResponsePubKey{}
	mi := &file_exposer_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponsePubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponsePubKey) ProtoMessage() {}

func (x *ResponsePubKey) ProtoReflect() protoreflect.Message {
	mi := &file_exposer_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponsePubKey.ProtoReflect.Descriptor instead.
func (*ResponsePubKey) Descriptor() ([]byte, []int) {
	return file_exposer_service_proto_rawDescGZIP(), []int{1}
}

func (x *ResponsePubKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResponsePubKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ResponseFileData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseFileData) Reset() {
	*x = ResponseFileData{}
	mi := &file_exposer_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseFileData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseFileData) ProtoMessage() {}

func (x *ResponseFileData) ProtoReflect() protoreflect.Message {
	mi := &file_exposer_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseFileData.ProtoReflect.Descriptor instead.
func (*ResponseFileData) Descriptor() ([]byte, []int) {
	return file_exposer_service_proto_rawDescGZIP(), []int{2}
}

func (x *ResponseFileData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type RequestCreateChannel struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	AChain string                 `protobuf:"bytes,1,opt,name=a_chain,proto3" json:"a_chain,omitempty"`
	// if a_connection is not specified then a new connection is formed
	AConnection *string `protobuf:"bytes,2,opt,name=a_connection,proto3,oneof" json:"a_connection,omitempty"`
	// needs to be defined if a_connection is not defined
	BChain         *string `protobuf:"bytes,3,opt,name=b_chain,proto3,oneof" json:"b_chain,omitempty"`
	APort          string  `protobuf:"bytes,4,opt,name=a_port,proto3" json:"a_port,omitempty"`
	BPort          string  `protobuf:"bytes,5,opt,name=b_port,proto3" json:"b_port,omitempty"`
	ChannelVersion *string `protobuf:"bytes,6,opt,name=channel_version,proto3,oneof" json:"channel_version,omitempty"`
	Order          *string `protobuf:"bytes,7,opt,name=order,proto3,oneof" json:"order,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RequestCreateChannel) Reset() {
	*x = RequestCreateChannel{}
	mi := &file_exposer_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestCreateChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCreateChannel) ProtoMessage() {}

func (x *RequestCreateChannel) ProtoReflect() protoreflect.Message {
	mi := &file_exposer_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCreateChannel.ProtoReflect.Descriptor instead.
func (*RequestCreateChannel) Descriptor() ([]byte, []int) {
	return file_exposer_service_proto_rawDescGZIP(), []int{3}
}

func (x *RequestCreateChannel) GetAChain() string {
	if x != nil {
		return x.AChain
	}
	return ""
}

func (x *RequestCreateChannel) GetAConnection() string {
	if x != nil && x.AConnection != nil {
		return *x.AConnection
	}
	return ""
}

func (x *RequestCreateChannel) GetBChain() string {
	if x != nil && x.BChain != nil {
		return *x.BChain
	}
	return ""
}

func (x *RequestCreateChannel) GetAPort() string {
	if x != nil {
		return x.APort
	}
	return ""
}

func (x *RequestCreateChannel) GetBPort() string {
	if x != nil {
		return x.BPort
	}
	return ""
}

func (x *RequestCreateChannel) GetChannelVersion() string {
	if x != nil && x.ChannelVersion != nil {
		return *x.ChannelVersion
	}
	return ""
}

func (x *RequestCreateChannel) GetOrder() string {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return ""
}

type ResponseCreateChannel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResponseCreateChannel) Reset() {
	*x = ResponseCreateChannel{}
	mi := &file_exposer_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseCreateChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseCreateChannel) ProtoMessage() {}

func (x *ResponseCreateChannel) ProtoReflect() protoreflect.Message {
	mi := &file_exposer_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseCreateChannel.ProtoReflect.Descriptor instead.
func (*ResponseCreateChannel) Descriptor() ([]byte, []int) {
	return file_exposer_service_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseCreateChannel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_exposer_service_proto protoreflect.FileDescriptor

var file_exposer_service_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2f,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x22, 0x36,
	0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xad,
	0x02, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x5f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x5f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x62,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x0f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x2f,
	0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0xe7, 0x06, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x17, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x17, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0a, 0x12, 0x08, 0x2f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x53, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x10,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x53,
	0x5a, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x73, 0x73, 0x7a, 0x12, 0x53, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x0f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3f, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0d, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x79,
	0x73, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05, 0x2f, 0x6b, 0x65, 0x79, 0x73,
	0x12, 0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x4b, 0x65, 0x79, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4b, 0x65,
	0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x70, 0x72, 0x69, 0x76,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x6b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x70, 0x72,
	0x69, 0x76, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x10, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0b, 0x12, 0x09, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x6a, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1d,
	0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x1e, 0x2e,
	0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x1a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x80, 0x01, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x77, 0x65, 0x62, 0x2d, 0x69,
	0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0xca, 0x02, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0xe2, 0x02, 0x13, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_exposer_service_proto_rawDescOnce sync.Once
	file_exposer_service_proto_rawDescData []byte
)

func file_exposer_service_proto_rawDescGZIP() []byte {
	file_exposer_service_proto_rawDescOnce.Do(func() {
		file_exposer_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_exposer_service_proto_rawDesc), len(file_exposer_service_proto_rawDesc)))
	})
	return file_exposer_service_proto_rawDescData
}

var file_exposer_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_exposer_service_proto_goTypes = []any{
	(*ResponseNodeID)(nil),        // 0: exposer.ResponseNodeID
	(*ResponsePubKey)(nil),        // 1: exposer.ResponsePubKey
	(*ResponseFileData)(nil),      // 2: exposer.ResponseFileData
	(*RequestCreateChannel)(nil),  // 3: exposer.RequestCreateChannel
	(*ResponseCreateChannel)(nil), // 4: exposer.ResponseCreateChannel
	(*emptypb.Empty)(nil),         // 5: google.protobuf.Empty
	(*structpb.Struct)(nil),       // 6: google.protobuf.Struct
	(*Keys)(nil),                  // 7: exposer.Keys
	(*PrivValidatorKey)(nil),      // 8: exposer.PrivValidatorKey
	(*PrivValidatorState)(nil),    // 9: exposer.PrivValidatorState
	(*NodeKey)(nil),               // 10: exposer.NodeKey
}
var file_exposer_service_proto_depIdxs = []int32{
	5,  // 0: exposer.Exposer.GetNodeID:input_type -> google.protobuf.Empty
	5,  // 1: exposer.Exposer.GetPubKey:input_type -> google.protobuf.Empty
	5,  // 2: exposer.Exposer.GetGenesisFile:input_type -> google.protobuf.Empty
	5,  // 3: exposer.Exposer.GetGenesisSSZ:input_type -> google.protobuf.Empty
	5,  // 4: exposer.Exposer.GetConfigFile:input_type -> google.protobuf.Empty
	5,  // 5: exposer.Exposer.GetKeys:input_type -> google.protobuf.Empty
	5,  // 6: exposer.Exposer.GetPrivKey:input_type -> google.protobuf.Empty
	5,  // 7: exposer.Exposer.GetPrivValidatorState:input_type -> google.protobuf.Empty
	5,  // 8: exposer.Exposer.GetNodeKey:input_type -> google.protobuf.Empty
	3,  // 9: exposer.Exposer.CreateChannel:input_type -> exposer.RequestCreateChannel
	0,  // 10: exposer.Exposer.GetNodeID:output_type -> exposer.ResponseNodeID
	1,  // 11: exposer.Exposer.GetPubKey:output_type -> exposer.ResponsePubKey
	6,  // 12: exposer.Exposer.GetGenesisFile:output_type -> google.protobuf.Struct
	2,  // 13: exposer.Exposer.GetGenesisSSZ:output_type -> exposer.ResponseFileData
	2,  // 14: exposer.Exposer.GetConfigFile:output_type -> exposer.ResponseFileData
	7,  // 15: exposer.Exposer.GetKeys:output_type -> exposer.Keys
	8,  // 16: exposer.Exposer.GetPrivKey:output_type -> exposer.PrivValidatorKey
	9,  // 17: exposer.Exposer.GetPrivValidatorState:output_type -> exposer.PrivValidatorState
	10, // 18: exposer.Exposer.GetNodeKey:output_type -> exposer.NodeKey
	4,  // 19: exposer.Exposer.CreateChannel:output_type -> exposer.ResponseCreateChannel
	10, // [10:20] is the sub-list for method output_type
	0,  // [0:10] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_exposer_service_proto_init() }
func file_exposer_service_proto_init() {
	if File_exposer_service_proto != nil {
		return
	}
	file_exposer_mnemonic_proto_init()
	file_exposer_node_proto_init()
	file_exposer_service_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_exposer_service_proto_rawDesc), len(file_exposer_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exposer_service_proto_goTypes,
		DependencyIndexes: file_exposer_service_proto_depIdxs,
		MessageInfos:      file_exposer_service_proto_msgTypes,
	}.Build()
	File_exposer_service_proto = out.File
	file_exposer_service_proto_goTypes = nil
	file_exposer_service_proto_depIdxs = nil
}
