// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: registry/chain.proto

package registry

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeeTokens struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Denom            string                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	FixedMinGasPrice float64                `protobuf:"fixed64,2,opt,name=fixed_min_gas_price,proto3" json:"fixed_min_gas_price,omitempty"`
	LowGasPrice      float64                `protobuf:"fixed64,3,opt,name=low_gas_price,proto3" json:"low_gas_price,omitempty"`
	AverageGasPrice  float64                `protobuf:"fixed64,4,opt,name=average_gas_price,proto3" json:"average_gas_price,omitempty"`
	HighGasPrice     float64                `protobuf:"fixed64,5,opt,name=high_gas_price,proto3" json:"high_gas_price,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FeeTokens) Reset() {
	*x = FeeTokens{}
	mi := &file_registry_chain_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeTokens) ProtoMessage() {}

func (x *FeeTokens) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeTokens.ProtoReflect.Descriptor instead.
func (*FeeTokens) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{0}
}

func (x *FeeTokens) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *FeeTokens) GetFixedMinGasPrice() float64 {
	if x != nil {
		return x.FixedMinGasPrice
	}
	return 0
}

func (x *FeeTokens) GetLowGasPrice() float64 {
	if x != nil {
		return x.LowGasPrice
	}
	return 0
}

func (x *FeeTokens) GetAverageGasPrice() float64 {
	if x != nil {
		return x.AverageGasPrice
	}
	return 0
}

func (x *FeeTokens) GetHighGasPrice() float64 {
	if x != nil {
		return x.HighGasPrice
	}
	return 0
}

type Fees struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FeeTokens     []*FeeTokens           `protobuf:"bytes,1,rep,name=fee_tokens,proto3" json:"fee_tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Fees) Reset() {
	*x = Fees{}
	mi := &file_registry_chain_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fees) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fees) ProtoMessage() {}

func (x *Fees) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fees.ProtoReflect.Descriptor instead.
func (*Fees) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{1}
}

func (x *Fees) GetFeeTokens() []*FeeTokens {
	if x != nil {
		return x.FeeTokens
	}
	return nil
}

type StakingTokens struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Denom         string                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StakingTokens) Reset() {
	*x = StakingTokens{}
	mi := &file_registry_chain_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StakingTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingTokens) ProtoMessage() {}

func (x *StakingTokens) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingTokens.ProtoReflect.Descriptor instead.
func (*StakingTokens) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{2}
}

func (x *StakingTokens) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

type LockDuration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Duration:
	//
	//	*LockDuration_Blocks
	//	*LockDuration_Time
	Duration      isLockDuration_Duration `protobuf_oneof:"duration"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LockDuration) Reset() {
	*x = LockDuration{}
	mi := &file_registry_chain_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LockDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockDuration) ProtoMessage() {}

func (x *LockDuration) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockDuration.ProtoReflect.Descriptor instead.
func (*LockDuration) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{3}
}

func (x *LockDuration) GetDuration() isLockDuration_Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *LockDuration) GetBlocks() uint32 {
	if x != nil {
		if x, ok := x.Duration.(*LockDuration_Blocks); ok {
			return x.Blocks
		}
	}
	return 0
}

func (x *LockDuration) GetTime() string {
	if x != nil {
		if x, ok := x.Duration.(*LockDuration_Time); ok {
			return x.Time
		}
	}
	return ""
}

type isLockDuration_Duration interface {
	isLockDuration_Duration()
}

type LockDuration_Blocks struct {
	Blocks uint32 `protobuf:"varint,1,opt,name=blocks,proto3,oneof"`
}

type LockDuration_Time struct {
	Time string `protobuf:"bytes,2,opt,name=time,proto3,oneof"`
}

func (*LockDuration_Blocks) isLockDuration_Duration() {}

func (*LockDuration_Time) isLockDuration_Duration() {}

type Staking struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StakingTokens []*StakingTokens       `protobuf:"bytes,1,rep,name=staking_tokens,proto3" json:"staking_tokens,omitempty"`
	LockDuration  *LockDuration          `protobuf:"bytes,2,opt,name=lock_duration,proto3,oneof" json:"lock_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Staking) Reset() {
	*x = Staking{}
	mi := &file_registry_chain_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Staking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Staking) ProtoMessage() {}

func (x *Staking) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Staking.ProtoReflect.Descriptor instead.
func (*Staking) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{4}
}

func (x *Staking) GetStakingTokens() []*StakingTokens {
	if x != nil {
		return x.StakingTokens
	}
	return nil
}

func (x *Staking) GetLockDuration() *LockDuration {
	if x != nil {
		return x.LockDuration
	}
	return nil
}

type Genesis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GenesisUrl    string                 `protobuf:"bytes,2,opt,name=genesis_url,proto3" json:"genesis_url,omitempty"`
	IcsCcvUrl     *string                `protobuf:"bytes,3,opt,name=ics_ccv_url,proto3,oneof" json:"ics_ccv_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Genesis) Reset() {
	*x = Genesis{}
	mi := &file_registry_chain_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Genesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Genesis) ProtoMessage() {}

func (x *Genesis) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Genesis.ProtoReflect.Descriptor instead.
func (*Genesis) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{5}
}

func (x *Genesis) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Genesis) GetGenesisUrl() string {
	if x != nil {
		return x.GenesisUrl
	}
	return ""
}

func (x *Genesis) GetIcsCcvUrl() string {
	if x != nil && x.IcsCcvUrl != nil {
		return *x.IcsCcvUrl
	}
	return ""
}

type Versions struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag                 string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Height              uint32                 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Proposal            *string                `protobuf:"bytes,4,opt,name=proposal,proto3,oneof" json:"proposal,omitempty"`
	PreviousVersionName *string                `protobuf:"bytes,5,opt,name=previous_version_name,proto3,oneof" json:"previous_version_name,omitempty"`
	NextVersionName     *string                `protobuf:"bytes,6,opt,name=next_version_name,proto3,oneof" json:"next_version_name,omitempty"`
	RecommendedVersion  *string                `protobuf:"bytes,7,opt,name=recommended_version,proto3,oneof" json:"recommended_version,omitempty"`
	GoVersion           *string                `protobuf:"bytes,8,opt,name=go_version,proto3,oneof" json:"go_version,omitempty"`
	CompatibleVersions  []string               `protobuf:"bytes,9,rep,name=compatible_versions,proto3" json:"compatible_versions,omitempty"`
	CosmosSdkVersion    *string                `protobuf:"bytes,10,opt,name=cosmos_sdk_version,proto3,oneof" json:"cosmos_sdk_version,omitempty"`
	Consensus           *Versions_Consensus    `protobuf:"bytes,11,opt,name=consensus,proto3,oneof" json:"consensus,omitempty"`
	CosmwasmVersion     *string                `protobuf:"bytes,12,opt,name=cosmwasm_version,proto3,oneof" json:"cosmwasm_version,omitempty"`
	CosmwasmEnabled     *bool                  `protobuf:"varint,13,opt,name=cosmwasm_enabled,proto3,oneof" json:"cosmwasm_enabled,omitempty"`
	CosmwasmPath        *string                `protobuf:"bytes,14,opt,name=cosmwasm_path,proto3,oneof" json:"cosmwasm_path,omitempty"`
	IbcGoVersion        *string                `protobuf:"bytes,15,opt,name=ibc_go_version,proto3,oneof" json:"ibc_go_version,omitempty"`
	IcsEnabled          []string               `protobuf:"bytes,16,rep,name=ics_enabled,proto3" json:"ics_enabled,omitempty"`
	Binaries            *Versions_Binaries     `protobuf:"bytes,17,opt,name=binaries,proto3,oneof" json:"binaries,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Versions) Reset() {
	*x = Versions{}
	mi := &file_registry_chain_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Versions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions) ProtoMessage() {}

func (x *Versions) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions.ProtoReflect.Descriptor instead.
func (*Versions) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{6}
}

func (x *Versions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Versions) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Versions) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Versions) GetProposal() string {
	if x != nil && x.Proposal != nil {
		return *x.Proposal
	}
	return ""
}

func (x *Versions) GetPreviousVersionName() string {
	if x != nil && x.PreviousVersionName != nil {
		return *x.PreviousVersionName
	}
	return ""
}

func (x *Versions) GetNextVersionName() string {
	if x != nil && x.NextVersionName != nil {
		return *x.NextVersionName
	}
	return ""
}

func (x *Versions) GetRecommendedVersion() string {
	if x != nil && x.RecommendedVersion != nil {
		return *x.RecommendedVersion
	}
	return ""
}

func (x *Versions) GetGoVersion() string {
	if x != nil && x.GoVersion != nil {
		return *x.GoVersion
	}
	return ""
}

func (x *Versions) GetCompatibleVersions() []string {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

func (x *Versions) GetCosmosSdkVersion() string {
	if x != nil && x.CosmosSdkVersion != nil {
		return *x.CosmosSdkVersion
	}
	return ""
}

func (x *Versions) GetConsensus() *Versions_Consensus {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *Versions) GetCosmwasmVersion() string {
	if x != nil && x.CosmwasmVersion != nil {
		return *x.CosmwasmVersion
	}
	return ""
}

func (x *Versions) GetCosmwasmEnabled() bool {
	if x != nil && x.CosmwasmEnabled != nil {
		return *x.CosmwasmEnabled
	}
	return false
}

func (x *Versions) GetCosmwasmPath() string {
	if x != nil && x.CosmwasmPath != nil {
		return *x.CosmwasmPath
	}
	return ""
}

func (x *Versions) GetIbcGoVersion() string {
	if x != nil && x.IbcGoVersion != nil {
		return *x.IbcGoVersion
	}
	return ""
}

func (x *Versions) GetIcsEnabled() []string {
	if x != nil {
		return x.IcsEnabled
	}
	return nil
}

func (x *Versions) GetBinaries() *Versions_Binaries {
	if x != nil {
		return x.Binaries
	}
	return nil
}

type Codebase struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	GitRepo            string                 `protobuf:"bytes,1,opt,name=git_repo,proto3" json:"git_repo,omitempty"`
	RecommendedVersion *string                `protobuf:"bytes,2,opt,name=recommended_version,proto3,oneof" json:"recommended_version,omitempty"`
	CompatibleVersions []string               `protobuf:"bytes,3,rep,name=compatible_versions,proto3" json:"compatible_versions,omitempty"`
	Binaries           *Versions_Binaries     `protobuf:"bytes,4,opt,name=binaries,proto3,oneof" json:"binaries,omitempty"`
	CosmosSdkVersion   *string                `protobuf:"bytes,5,opt,name=cosmos_sdk_version,proto3,oneof" json:"cosmos_sdk_version,omitempty"`
	Consensus          *Codebase_Consensus    `protobuf:"bytes,6,opt,name=consensus,proto3,oneof" json:"consensus,omitempty"`
	CosmwasmVersion    *string                `protobuf:"bytes,7,opt,name=cosmwasm_version,proto3,oneof" json:"cosmwasm_version,omitempty"`
	CosmwasmEnabled    *bool                  `protobuf:"varint,8,opt,name=cosmwasm_enabled,proto3,oneof" json:"cosmwasm_enabled,omitempty"`
	CosmwasmPath       *string                `protobuf:"bytes,9,opt,name=cosmwasm_path,proto3,oneof" json:"cosmwasm_path,omitempty"`
	IbcGoVersion       *string                `protobuf:"bytes,10,opt,name=ibc_go_version,proto3,oneof" json:"ibc_go_version,omitempty"`
	IcsEnabled         []string               `protobuf:"bytes,11,rep,name=ics_enabled,proto3" json:"ics_enabled,omitempty"`
	Genesis            *Genesis               `protobuf:"bytes,12,opt,name=genesis,proto3,oneof" json:"genesis,omitempty"`
	Versions           []*Versions            `protobuf:"bytes,13,rep,name=versions,proto3" json:"versions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Codebase) Reset() {
	*x = Codebase{}
	mi := &file_registry_chain_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Codebase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Codebase) ProtoMessage() {}

func (x *Codebase) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Codebase.ProtoReflect.Descriptor instead.
func (*Codebase) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{7}
}

func (x *Codebase) GetGitRepo() string {
	if x != nil {
		return x.GitRepo
	}
	return ""
}

func (x *Codebase) GetRecommendedVersion() string {
	if x != nil && x.RecommendedVersion != nil {
		return *x.RecommendedVersion
	}
	return ""
}

func (x *Codebase) GetCompatibleVersions() []string {
	if x != nil {
		return x.CompatibleVersions
	}
	return nil
}

func (x *Codebase) GetBinaries() *Versions_Binaries {
	if x != nil {
		return x.Binaries
	}
	return nil
}

func (x *Codebase) GetCosmosSdkVersion() string {
	if x != nil && x.CosmosSdkVersion != nil {
		return *x.CosmosSdkVersion
	}
	return ""
}

func (x *Codebase) GetConsensus() *Codebase_Consensus {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *Codebase) GetCosmwasmVersion() string {
	if x != nil && x.CosmwasmVersion != nil {
		return *x.CosmwasmVersion
	}
	return ""
}

func (x *Codebase) GetCosmwasmEnabled() bool {
	if x != nil && x.CosmwasmEnabled != nil {
		return *x.CosmwasmEnabled
	}
	return false
}

func (x *Codebase) GetCosmwasmPath() string {
	if x != nil && x.CosmwasmPath != nil {
		return *x.CosmwasmPath
	}
	return ""
}

func (x *Codebase) GetIbcGoVersion() string {
	if x != nil && x.IbcGoVersion != nil {
		return *x.IbcGoVersion
	}
	return ""
}

func (x *Codebase) GetIcsEnabled() []string {
	if x != nil {
		return x.IcsEnabled
	}
	return nil
}

func (x *Codebase) GetGenesis() *Genesis {
	if x != nil {
		return x.Genesis
	}
	return nil
}

func (x *Codebase) GetVersions() []*Versions {
	if x != nil {
		return x.Versions
	}
	return nil
}

type LogoURIs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Png           string                 `protobuf:"bytes,1,opt,name=png,proto3" json:"png,omitempty"`
	Svg           string                 `protobuf:"bytes,2,opt,name=svg,proto3" json:"svg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogoURIs) Reset() {
	*x = LogoURIs{}
	mi := &file_registry_chain_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogoURIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoURIs) ProtoMessage() {}

func (x *LogoURIs) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoURIs.ProtoReflect.Descriptor instead.
func (*LogoURIs) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{8}
}

func (x *LogoURIs) GetPng() string {
	if x != nil {
		return x.Png
	}
	return ""
}

func (x *LogoURIs) GetSvg() string {
	if x != nil {
		return x.Svg
	}
	return ""
}

type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Png           *string                `protobuf:"bytes,1,opt,name=png,proto3,oneof" json:"png,omitempty"`
	Theme         map[string]string      `protobuf:"bytes,2,rep,name=theme,proto3" json:"theme,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_registry_chain_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{9}
}

func (x *Image) GetPng() string {
	if x != nil && x.Png != nil {
		return *x.Png
	}
	return ""
}

func (x *Image) GetTheme() map[string]string {
	if x != nil {
		return x.Theme
	}
	return nil
}

type Peer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Provider      *string                `protobuf:"bytes,3,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Peer) Reset() {
	*x = Peer{}
	mi := &file_registry_chain_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peer) ProtoMessage() {}

func (x *Peer) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peer.ProtoReflect.Descriptor instead.
func (*Peer) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{10}
}

func (x *Peer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Peer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Peer) GetProvider() string {
	if x != nil && x.Provider != nil {
		return *x.Provider
	}
	return ""
}

type Peers struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Seeds           []*Peer                `protobuf:"bytes,1,rep,name=seeds,proto3" json:"seeds,omitempty"`
	PersistentPeers []*Peer                `protobuf:"bytes,2,rep,name=persistent_peers,proto3" json:"persistent_peers,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Peers) Reset() {
	*x = Peers{}
	mi := &file_registry_chain_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Peers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Peers) ProtoMessage() {}

func (x *Peers) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Peers.ProtoReflect.Descriptor instead.
func (*Peers) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{11}
}

func (x *Peers) GetSeeds() []*Peer {
	if x != nil {
		return x.Seeds
	}
	return nil
}

func (x *Peers) GetPersistentPeers() []*Peer {
	if x != nil {
		return x.PersistentPeers
	}
	return nil
}

type APIs struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Rpc            []*APIs_API            `protobuf:"bytes,1,rep,name=rpc,proto3" json:"rpc,omitempty"`
	Rest           []*APIs_API            `protobuf:"bytes,2,rep,name=rest,proto3" json:"rest,omitempty"`
	Grpc           []*APIs_API            `protobuf:"bytes,3,rep,name=grpc,proto3" json:"grpc,omitempty"`
	Wss            []*APIs_API            `protobuf:"bytes,4,rep,name=wss,proto3" json:"wss,omitempty"`
	GrpcWeb        []*APIs_API            `protobuf:"bytes,5,rep,name=grpc_web,json=grpc-web,proto3" json:"grpc_web,omitempty"`
	EvmHttpJsonrpc []*APIs_API            `protobuf:"bytes,6,rep,name=evm_http_jsonrpc,json=evm-http-jsonrpc,proto3" json:"evm_http_jsonrpc,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *APIs) Reset() {
	*x = APIs{}
	mi := &file_registry_chain_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIs) ProtoMessage() {}

func (x *APIs) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIs.ProtoReflect.Descriptor instead.
func (*APIs) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{12}
}

func (x *APIs) GetRpc() []*APIs_API {
	if x != nil {
		return x.Rpc
	}
	return nil
}

func (x *APIs) GetRest() []*APIs_API {
	if x != nil {
		return x.Rest
	}
	return nil
}

func (x *APIs) GetGrpc() []*APIs_API {
	if x != nil {
		return x.Grpc
	}
	return nil
}

func (x *APIs) GetWss() []*APIs_API {
	if x != nil {
		return x.Wss
	}
	return nil
}

func (x *APIs) GetGrpcWeb() []*APIs_API {
	if x != nil {
		return x.GrpcWeb
	}
	return nil
}

func (x *APIs) GetEvmHttpJsonrpc() []*APIs_API {
	if x != nil {
		return x.EvmHttpJsonrpc
	}
	return nil
}

type Explorer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TxPage        *string                `protobuf:"bytes,3,opt,name=tx_page,proto3,oneof" json:"tx_page,omitempty"`
	AccountPage   *string                `protobuf:"bytes,4,opt,name=account_page,proto3,oneof" json:"account_page,omitempty"`
	ValidatorPage *string                `protobuf:"bytes,5,opt,name=validator_page,proto3,oneof" json:"validator_page,omitempty"`
	ProposalPage  *string                `protobuf:"bytes,6,opt,name=proposal_page,proto3,oneof" json:"proposal_page,omitempty"`
	BlockPage     *string                `protobuf:"bytes,7,opt,name=block_page,proto3,oneof" json:"block_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Explorer) Reset() {
	*x = Explorer{}
	mi := &file_registry_chain_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Explorer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Explorer) ProtoMessage() {}

func (x *Explorer) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Explorer.ProtoReflect.Descriptor instead.
func (*Explorer) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{13}
}

func (x *Explorer) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Explorer) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Explorer) GetTxPage() string {
	if x != nil && x.TxPage != nil {
		return *x.TxPage
	}
	return ""
}

func (x *Explorer) GetAccountPage() string {
	if x != nil && x.AccountPage != nil {
		return *x.AccountPage
	}
	return ""
}

func (x *Explorer) GetValidatorPage() string {
	if x != nil && x.ValidatorPage != nil {
		return *x.ValidatorPage
	}
	return ""
}

func (x *Explorer) GetProposalPage() string {
	if x != nil && x.ProposalPage != nil {
		return *x.ProposalPage
	}
	return ""
}

func (x *Explorer) GetBlockPage() string {
	if x != nil && x.BlockPage != nil {
		return *x.BlockPage
	}
	return ""
}

type ChainRegistry struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	Schema             string                      `protobuf:"bytes,1,opt,name=schema,json=$schema,proto3" json:"schema,omitempty"`
	ChainName          string                      `protobuf:"bytes,2,opt,name=chain_name,proto3" json:"chain_name,omitempty"`
	ChainId            string                      `protobuf:"bytes,3,opt,name=chain_id,proto3" json:"chain_id,omitempty"`
	PreForkChainName   *string                     `protobuf:"bytes,4,opt,name=pre_fork_chain_name,proto3,oneof" json:"pre_fork_chain_name,omitempty"`
	PrettyName         string                      `protobuf:"bytes,5,opt,name=pretty_name,proto3" json:"pretty_name,omitempty"`
	Website            *string                     `protobuf:"bytes,6,opt,name=website,proto3,oneof" json:"website,omitempty"`
	UpdateLink         *string                     `protobuf:"bytes,7,opt,name=update_link,proto3,oneof" json:"update_link,omitempty"`
	Status             string                      `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	NetworkType        string                      `protobuf:"bytes,9,opt,name=network_type,proto3" json:"network_type,omitempty"`
	Bech32Prefix       string                      `protobuf:"bytes,10,opt,name=bech32_prefix,proto3" json:"bech32_prefix,omitempty"`
	Bech32Config       *ChainRegistry_Bech32Config `protobuf:"bytes,11,opt,name=bech32_config,proto3,oneof" json:"bech32_config,omitempty"`
	DaemonName         string                      `protobuf:"bytes,12,opt,name=daemon_name,proto3" json:"daemon_name,omitempty"`
	NodeHome           string                      `protobuf:"bytes,13,opt,name=node_home,proto3" json:"node_home,omitempty"`
	KeyAlgos           []string                    `protobuf:"bytes,14,rep,name=key_algos,proto3" json:"key_algos,omitempty"`
	Slip44             uint32                      `protobuf:"varint,15,opt,name=slip44,proto3" json:"slip44,omitempty"`
	AlternativeSlip44S []uint32                    `protobuf:"varint,16,rep,packed,name=alternative_slip44s,proto3" json:"alternative_slip44s,omitempty"`
	Fees               *Fees                       `protobuf:"bytes,17,opt,name=fees,proto3,oneof" json:"fees,omitempty"`
	Staking            *Staking                    `protobuf:"bytes,18,opt,name=staking,proto3,oneof" json:"staking,omitempty"`
	Codebase           *Codebase                   `protobuf:"bytes,19,opt,name=codebase,proto3,oneof" json:"codebase,omitempty"`
	Logo_URIs          *LogoURIs                   `protobuf:"bytes,20,opt,name=logo_URIs,proto3,oneof" json:"logo_URIs,omitempty"`
	Images             []*Image                    `protobuf:"bytes,21,rep,name=images,proto3" json:"images,omitempty"`
	Peers              *Peers                      `protobuf:"bytes,22,opt,name=peers,proto3,oneof" json:"peers,omitempty"`
	Apis               *APIs                       `protobuf:"bytes,23,opt,name=apis,proto3,oneof" json:"apis,omitempty"`
	Explorers          []*Explorer                 `protobuf:"bytes,24,rep,name=explorers,proto3" json:"explorers,omitempty"`
	Keywords           []string                    `protobuf:"bytes,25,rep,name=keywords,proto3" json:"keywords,omitempty"`
	ExtraCodecs        []string                    `protobuf:"bytes,26,rep,name=extra_codecs,proto3" json:"extra_codecs,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChainRegistry) Reset() {
	*x = ChainRegistry{}
	mi := &file_registry_chain_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainRegistry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRegistry) ProtoMessage() {}

func (x *ChainRegistry) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRegistry.ProtoReflect.Descriptor instead.
func (*ChainRegistry) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{14}
}

func (x *ChainRegistry) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ChainRegistry) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *ChainRegistry) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ChainRegistry) GetPreForkChainName() string {
	if x != nil && x.PreForkChainName != nil {
		return *x.PreForkChainName
	}
	return ""
}

func (x *ChainRegistry) GetPrettyName() string {
	if x != nil {
		return x.PrettyName
	}
	return ""
}

func (x *ChainRegistry) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *ChainRegistry) GetUpdateLink() string {
	if x != nil && x.UpdateLink != nil {
		return *x.UpdateLink
	}
	return ""
}

func (x *ChainRegistry) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ChainRegistry) GetNetworkType() string {
	if x != nil {
		return x.NetworkType
	}
	return ""
}

func (x *ChainRegistry) GetBech32Prefix() string {
	if x != nil {
		return x.Bech32Prefix
	}
	return ""
}

func (x *ChainRegistry) GetBech32Config() *ChainRegistry_Bech32Config {
	if x != nil {
		return x.Bech32Config
	}
	return nil
}

func (x *ChainRegistry) GetDaemonName() string {
	if x != nil {
		return x.DaemonName
	}
	return ""
}

func (x *ChainRegistry) GetNodeHome() string {
	if x != nil {
		return x.NodeHome
	}
	return ""
}

func (x *ChainRegistry) GetKeyAlgos() []string {
	if x != nil {
		return x.KeyAlgos
	}
	return nil
}

func (x *ChainRegistry) GetSlip44() uint32 {
	if x != nil {
		return x.Slip44
	}
	return 0
}

func (x *ChainRegistry) GetAlternativeSlip44S() []uint32 {
	if x != nil {
		return x.AlternativeSlip44S
	}
	return nil
}

func (x *ChainRegistry) GetFees() *Fees {
	if x != nil {
		return x.Fees
	}
	return nil
}

func (x *ChainRegistry) GetStaking() *Staking {
	if x != nil {
		return x.Staking
	}
	return nil
}

func (x *ChainRegistry) GetCodebase() *Codebase {
	if x != nil {
		return x.Codebase
	}
	return nil
}

func (x *ChainRegistry) GetLogo_URIs() *LogoURIs {
	if x != nil {
		return x.Logo_URIs
	}
	return nil
}

func (x *ChainRegistry) GetImages() []*Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ChainRegistry) GetPeers() *Peers {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *ChainRegistry) GetApis() *APIs {
	if x != nil {
		return x.Apis
	}
	return nil
}

func (x *ChainRegistry) GetExplorers() []*Explorer {
	if x != nil {
		return x.Explorers
	}
	return nil
}

func (x *ChainRegistry) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ChainRegistry) GetExtraCodecs() []string {
	if x != nil {
		return x.ExtraCodecs
	}
	return nil
}

// DenomUnit and ChainAsset messages
type DenomUnit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Denom         string                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Exponent      int32                  `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	Aliases       []string               `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DenomUnit) Reset() {
	*x = DenomUnit{}
	mi := &file_registry_chain_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenomUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenomUnit) ProtoMessage() {}

func (x *DenomUnit) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenomUnit.ProtoReflect.Descriptor instead.
func (*DenomUnit) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{15}
}

func (x *DenomUnit) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *DenomUnit) GetExponent() int32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

func (x *DenomUnit) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type ChainAsset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	DenomUnits    []*DenomUnit           `protobuf:"bytes,2,rep,name=denom_units,proto3" json:"denom_units,omitempty"`
	Base          string                 `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Display       *string                `protobuf:"bytes,5,opt,name=display,proto3,oneof" json:"display,omitempty"`
	Symbol        *string                `protobuf:"bytes,6,opt,name=symbol,proto3,oneof" json:"symbol,omitempty"`
	CoingeckoId   *string                `protobuf:"bytes,7,opt,name=coingecko_id,proto3,oneof" json:"coingecko_id,omitempty"`
	Keywords      []string               `protobuf:"bytes,8,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Logo_URIs     *LogoURIs              `protobuf:"bytes,9,opt,name=logo_URIs,proto3,oneof" json:"logo_URIs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainAsset) Reset() {
	*x = ChainAsset{}
	mi := &file_registry_chain_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainAsset) ProtoMessage() {}

func (x *ChainAsset) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainAsset.ProtoReflect.Descriptor instead.
func (*ChainAsset) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{16}
}

func (x *ChainAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChainAsset) GetDenomUnits() []*DenomUnit {
	if x != nil {
		return x.DenomUnits
	}
	return nil
}

func (x *ChainAsset) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *ChainAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChainAsset) GetDisplay() string {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return ""
}

func (x *ChainAsset) GetSymbol() string {
	if x != nil && x.Symbol != nil {
		return *x.Symbol
	}
	return ""
}

func (x *ChainAsset) GetCoingeckoId() string {
	if x != nil && x.CoingeckoId != nil {
		return *x.CoingeckoId
	}
	return ""
}

func (x *ChainAsset) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *ChainAsset) GetLogo_URIs() *LogoURIs {
	if x != nil {
		return x.Logo_URIs
	}
	return nil
}

type AssetList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChainName     string                 `protobuf:"bytes,1,opt,name=chain_name,proto3" json:"chain_name,omitempty"`
	Assets        []*ChainAsset          `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetList) Reset() {
	*x = AssetList{}
	mi := &file_registry_chain_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetList) ProtoMessage() {}

func (x *AssetList) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetList.ProtoReflect.Descriptor instead.
func (*AssetList) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{17}
}

func (x *AssetList) GetChainName() string {
	if x != nil {
		return x.ChainName
	}
	return ""
}

func (x *AssetList) GetAssets() []*ChainAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type Versions_Consensus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Version       *string                `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Versions_Consensus) Reset() {
	*x = Versions_Consensus{}
	mi := &file_registry_chain_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Versions_Consensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions_Consensus) ProtoMessage() {}

func (x *Versions_Consensus) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions_Consensus.ProtoReflect.Descriptor instead.
func (*Versions_Consensus) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Versions_Consensus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Versions_Consensus) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type Versions_Binaries struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LinuxAmd64    *string                `protobuf:"bytes,1,opt,name=linux_amd64,json=linux/amd64,proto3,oneof" json:"linux_amd64,omitempty"`
	LinuxArm64    *string                `protobuf:"bytes,2,opt,name=linux_arm64,json=linux/arm64,proto3,oneof" json:"linux_arm64,omitempty"`
	DarwinAmd64   *string                `protobuf:"bytes,3,opt,name=darwin_amd64,json=darwin/amd64,proto3,oneof" json:"darwin_amd64,omitempty"`
	DarwinArm64   *string                `protobuf:"bytes,4,opt,name=darwin_arm64,json=darwin/arm64,proto3,oneof" json:"darwin_arm64,omitempty"`
	WindowsAmd64  *string                `protobuf:"bytes,5,opt,name=windows_amd64,json=windows/amd64,proto3,oneof" json:"windows_amd64,omitempty"`
	WindowsArm64  *string                `protobuf:"bytes,6,opt,name=windows_arm64,json=windows/arm64,proto3,oneof" json:"windows_arm64,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Versions_Binaries) Reset() {
	*x = Versions_Binaries{}
	mi := &file_registry_chain_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Versions_Binaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Versions_Binaries) ProtoMessage() {}

func (x *Versions_Binaries) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Versions_Binaries.ProtoReflect.Descriptor instead.
func (*Versions_Binaries) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Versions_Binaries) GetLinuxAmd64() string {
	if x != nil && x.LinuxAmd64 != nil {
		return *x.LinuxAmd64
	}
	return ""
}

func (x *Versions_Binaries) GetLinuxArm64() string {
	if x != nil && x.LinuxArm64 != nil {
		return *x.LinuxArm64
	}
	return ""
}

func (x *Versions_Binaries) GetDarwinAmd64() string {
	if x != nil && x.DarwinAmd64 != nil {
		return *x.DarwinAmd64
	}
	return ""
}

func (x *Versions_Binaries) GetDarwinArm64() string {
	if x != nil && x.DarwinArm64 != nil {
		return *x.DarwinArm64
	}
	return ""
}

func (x *Versions_Binaries) GetWindowsAmd64() string {
	if x != nil && x.WindowsAmd64 != nil {
		return *x.WindowsAmd64
	}
	return ""
}

func (x *Versions_Binaries) GetWindowsArm64() string {
	if x != nil && x.WindowsArm64 != nil {
		return *x.WindowsArm64
	}
	return ""
}

type Codebase_Consensus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Version       *string                `protobuf:"bytes,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Codebase_Consensus) Reset() {
	*x = Codebase_Consensus{}
	mi := &file_registry_chain_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Codebase_Consensus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Codebase_Consensus) ProtoMessage() {}

func (x *Codebase_Consensus) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Codebase_Consensus.ProtoReflect.Descriptor instead.
func (*Codebase_Consensus) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Codebase_Consensus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Codebase_Consensus) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

type APIs_API struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Provider      string                 `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	Archive       *bool                  `protobuf:"varint,3,opt,name=archive,proto3,oneof" json:"archive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *APIs_API) Reset() {
	*x = APIs_API{}
	mi := &file_registry_chain_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *APIs_API) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIs_API) ProtoMessage() {}

func (x *APIs_API) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIs_API.ProtoReflect.Descriptor instead.
func (*APIs_API) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{12, 0}
}

func (x *APIs_API) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *APIs_API) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *APIs_API) GetArchive() bool {
	if x != nil && x.Archive != nil {
		return *x.Archive
	}
	return false
}

type ChainRegistry_Bech32Config struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Bech32PrefixAccAddr  *string                `protobuf:"bytes,1,opt,name=bech32PrefixAccAddr,proto3,oneof" json:"bech32PrefixAccAddr,omitempty"`
	Bech32PrefixAccPub   *string                `protobuf:"bytes,2,opt,name=bech32PrefixAccPub,proto3,oneof" json:"bech32PrefixAccPub,omitempty"`
	Bech32PrefixValAddr  *string                `protobuf:"bytes,3,opt,name=bech32PrefixValAddr,proto3,oneof" json:"bech32PrefixValAddr,omitempty"`
	Bech32PrefixValPub   *string                `protobuf:"bytes,4,opt,name=bech32PrefixValPub,proto3,oneof" json:"bech32PrefixValPub,omitempty"`
	Bech32PrefixConsAddr *string                `protobuf:"bytes,5,opt,name=bech32PrefixConsAddr,proto3,oneof" json:"bech32PrefixConsAddr,omitempty"`
	Bech32PrefixConsPub  *string                `protobuf:"bytes,6,opt,name=bech32PrefixConsPub,proto3,oneof" json:"bech32PrefixConsPub,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ChainRegistry_Bech32Config) Reset() {
	*x = ChainRegistry_Bech32Config{}
	mi := &file_registry_chain_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainRegistry_Bech32Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRegistry_Bech32Config) ProtoMessage() {}

func (x *ChainRegistry_Bech32Config) ProtoReflect() protoreflect.Message {
	mi := &file_registry_chain_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRegistry_Bech32Config.ProtoReflect.Descriptor instead.
func (*ChainRegistry_Bech32Config) Descriptor() ([]byte, []int) {
	return file_registry_chain_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixAccAddr() string {
	if x != nil && x.Bech32PrefixAccAddr != nil {
		return *x.Bech32PrefixAccAddr
	}
	return ""
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixAccPub() string {
	if x != nil && x.Bech32PrefixAccPub != nil {
		return *x.Bech32PrefixAccPub
	}
	return ""
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixValAddr() string {
	if x != nil && x.Bech32PrefixValAddr != nil {
		return *x.Bech32PrefixValAddr
	}
	return ""
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixValPub() string {
	if x != nil && x.Bech32PrefixValPub != nil {
		return *x.Bech32PrefixValPub
	}
	return ""
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixConsAddr() string {
	if x != nil && x.Bech32PrefixConsAddr != nil {
		return *x.Bech32PrefixConsAddr
	}
	return ""
}

func (x *ChainRegistry_Bech32Config) GetBech32PrefixConsPub() string {
	if x != nil && x.Bech32PrefixConsPub != nil {
		return *x.Bech32PrefixConsPub
	}
	return ""
}

var File_registry_chain_proto protoreflect.FileDescriptor

var file_registry_chain_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd0, 0x01, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x6f, 0x77,
	0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0x3c, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x4b, 0x0a, 0x0d, 0x4c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x14, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x07,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x12, 0x25, 0x0a,
	0x0b, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x63, 0x76, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x63, 0x76, 0x5f, 0x75, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x63, 0x73, 0x5f, 0x63, 0x63, 0x76,
	0x5f, 0x75, 0x72, 0x6c, 0x22, 0x8f, 0x0b, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x67, 0x6f, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x12,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x48, 0x06, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x10,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52,
	0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x0e, 0x69, 0x62, 0x63, 0x5f, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0e, 0x69, 0x62, 0x63, 0x5f, 0x67,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c,
	0x0a, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x0b, 0x52,
	0x08, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x1a, 0x4a, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xe6, 0x02, 0x0a, 0x08, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x61,
	0x6d, 0x64, 0x36, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x61, 0x72, 0x6d, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d,
	0x64, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x72,
	0x77, 0x69, 0x6e, 0x2f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x2f, 0x61, 0x72, 0x6d,
	0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73,
	0x5f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x2f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x72, 0x6d, 0x36,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x2f, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x5f, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x6d, 0x36, 0x34, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x6d, 0x64, 0x36, 0x34, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x5f, 0x61, 0x72, 0x6d, 0x36,
	0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x6f, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73,
	0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x62, 0x63, 0x5f, 0x67,
	0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf2, 0x06, 0x0a, 0x08, 0x43, 0x6f, 0x64, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x35, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13,
	0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x48, 0x01, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x64, 0x6b,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x48, 0x03, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10,
	0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61,
	0x73, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a,
	0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x73, 0x6d, 0x77,
	0x61, 0x73, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73,
	0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x69, 0x62, 0x63,
	0x5f, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x0e, 0x69, 0x62, 0x63, 0x5f, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x63, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x08, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4a, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x73, 0x6d, 0x77, 0x61,
	0x73, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63,
	0x6f, 0x73, 0x6d, 0x77, 0x61, 0x73, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x69, 0x62, 0x63, 0x5f, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x22, 0x2e, 0x0a, 0x08, 0x4c,
	0x6f, 0x67, 0x6f, 0x55, 0x52, 0x49, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6e, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x76, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x76, 0x67, 0x22, 0x92, 0x01, 0x0a, 0x05,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x70, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x70, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x68, 0x65,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x70, 0x6e, 0x67,
	0x22, 0x5e, 0x0a, 0x04, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x22, 0x69, 0x0a, 0x05, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x65, 0x65,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x05, 0x73, 0x65, 0x65, 0x64, 0x73, 0x12,
	0x3a, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xfa, 0x02, 0x0a, 0x04,
	0x41, 0x50, 0x49, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x50, 0x49,
	0x73, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x26, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x04, 0x72, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x50, 0x49, 0x73,
	0x2e, 0x41, 0x50, 0x49, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x24, 0x0a, 0x03, 0x77, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x03, 0x77, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x08, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x77, 0x65, 0x62, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x50,
	0x49, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62,
	0x12, 0x3e, 0x0a, 0x10, 0x65, 0x76, 0x6d, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x50, 0x49, 0x73, 0x2e, 0x41, 0x50, 0x49, 0x52, 0x10,
	0x65, 0x76, 0x6d, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x70, 0x63,
	0x1a, 0x66, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x45, 0x78, 0x70,
	0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x86, 0x0d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x24, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x74, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x65, 0x63, 0x68,
	0x33, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x65, 0x63,
	0x68, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x65, 0x63, 0x68, 0x33, 0x32,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x03, 0x52, 0x0d, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x70,
	0x34, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6c, 0x69, 0x70, 0x34, 0x34,
	0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x6c, 0x69, 0x70, 0x34, 0x34, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x34,
	0x34, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x65, 0x73,
	0x48, 0x04, 0x52, 0x04, 0x66, 0x65, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48,
	0x05, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x08, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x48, 0x06, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x55, 0x52, 0x49, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x49, 0x73, 0x48, 0x07, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x6f, 0x5f, 0x55, 0x52, 0x49, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x48, 0x08, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x04, 0x61, 0x70, 0x69, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x41, 0x50, 0x49, 0x73, 0x48, 0x09, 0x52, 0x04,
	0x61, 0x70, 0x69, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x6c, 0x6f,
	0x72, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x63, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x73, 0x1a, 0xe5, 0x03, 0x0a, 0x0c, 0x42, 0x65,
	0x63, 0x68, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a, 0x13, 0x62, 0x65,
	0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x13, 0x62, 0x65, 0x63, 0x68, 0x33,
	0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x12, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x41, 0x63, 0x63, 0x50, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x12, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x63, 0x63,
	0x50, 0x75, 0x62, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x13, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x12, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c,
	0x50, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x12, 0x62, 0x65, 0x63,
	0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x50, 0x75, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x14, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x43, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x62,
	0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x50,
	0x75, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x13, 0x62, 0x65, 0x63, 0x68,
	0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x50, 0x75, 0x62, 0x88,
	0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x41, 0x63, 0x63, 0x41, 0x64, 0x64, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62,
	0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x41, 0x63, 0x63, 0x50, 0x75,
	0x62, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x56, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x62, 0x65,
	0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x56, 0x61, 0x6c, 0x50, 0x75, 0x62,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x43, 0x6f, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x62, 0x65,
	0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x73, 0x50, 0x75,
	0x62, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x65, 0x65, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x62, 0x61, 0x73, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x5f, 0x55, 0x52, 0x49, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x70, 0x69, 0x73, 0x22, 0x57, 0x0a, 0x09, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x22, 0xfb, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x63,
	0x6b, 0x6f, 0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x55, 0x52, 0x49,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x55, 0x52, 0x49, 0x73, 0x48, 0x03, 0x52, 0x09, 0x6c,
	0x6f, 0x67, 0x6f, 0x5f, 0x55, 0x52, 0x49, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x63, 0x6b, 0x6f,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x55, 0x52, 0x49,
	0x73, 0x22, 0x59, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x42, 0x84, 0x01, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x77, 0x65, 0x62,
	0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0xa2, 0x02, 0x03, 0x52, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0xca, 0x02, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0xe2, 0x02, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_registry_chain_proto_rawDescOnce sync.Once
	file_registry_chain_proto_rawDescData []byte
)

func file_registry_chain_proto_rawDescGZIP() []byte {
	file_registry_chain_proto_rawDescOnce.Do(func() {
		file_registry_chain_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_registry_chain_proto_rawDesc), len(file_registry_chain_proto_rawDesc)))
	})
	return file_registry_chain_proto_rawDescData
}

var file_registry_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_registry_chain_proto_goTypes = []any{
	(*FeeTokens)(nil),                  // 0: registry.Fee_tokens
	(*Fees)(nil),                       // 1: registry.Fees
	(*StakingTokens)(nil),              // 2: registry.Staking_tokens
	(*LockDuration)(nil),               // 3: registry.Lock_duration
	(*Staking)(nil),                    // 4: registry.Staking
	(*Genesis)(nil),                    // 5: registry.Genesis
	(*Versions)(nil),                   // 6: registry.Versions
	(*Codebase)(nil),                   // 7: registry.Codebase
	(*LogoURIs)(nil),                   // 8: registry.LogoURIs
	(*Image)(nil),                      // 9: registry.Image
	(*Peer)(nil),                       // 10: registry.Peer
	(*Peers)(nil),                      // 11: registry.Peers
	(*APIs)(nil),                       // 12: registry.APIs
	(*Explorer)(nil),                   // 13: registry.Explorer
	(*ChainRegistry)(nil),              // 14: registry.ChainRegistry
	(*DenomUnit)(nil),                  // 15: registry.DenomUnit
	(*ChainAsset)(nil),                 // 16: registry.ChainAsset
	(*AssetList)(nil),                  // 17: registry.AssetList
	(*Versions_Consensus)(nil),         // 18: registry.Versions.Consensus
	(*Versions_Binaries)(nil),          // 19: registry.Versions.Binaries
	(*Codebase_Consensus)(nil),         // 20: registry.Codebase.Consensus
	nil,                                // 21: registry.Image.ThemeEntry
	(*APIs_API)(nil),                   // 22: registry.APIs.API
	(*ChainRegistry_Bech32Config)(nil), // 23: registry.ChainRegistry.Bech32Config
}
var file_registry_chain_proto_depIdxs = []int32{
	0,  // 0: registry.Fees.fee_tokens:type_name -> registry.Fee_tokens
	2,  // 1: registry.Staking.staking_tokens:type_name -> registry.Staking_tokens
	3,  // 2: registry.Staking.lock_duration:type_name -> registry.Lock_duration
	18, // 3: registry.Versions.consensus:type_name -> registry.Versions.Consensus
	19, // 4: registry.Versions.binaries:type_name -> registry.Versions.Binaries
	19, // 5: registry.Codebase.binaries:type_name -> registry.Versions.Binaries
	20, // 6: registry.Codebase.consensus:type_name -> registry.Codebase.Consensus
	5,  // 7: registry.Codebase.genesis:type_name -> registry.Genesis
	6,  // 8: registry.Codebase.versions:type_name -> registry.Versions
	21, // 9: registry.Image.theme:type_name -> registry.Image.ThemeEntry
	10, // 10: registry.Peers.seeds:type_name -> registry.Peer
	10, // 11: registry.Peers.persistent_peers:type_name -> registry.Peer
	22, // 12: registry.APIs.rpc:type_name -> registry.APIs.API
	22, // 13: registry.APIs.rest:type_name -> registry.APIs.API
	22, // 14: registry.APIs.grpc:type_name -> registry.APIs.API
	22, // 15: registry.APIs.wss:type_name -> registry.APIs.API
	22, // 16: registry.APIs.grpc_web:type_name -> registry.APIs.API
	22, // 17: registry.APIs.evm_http_jsonrpc:type_name -> registry.APIs.API
	23, // 18: registry.ChainRegistry.bech32_config:type_name -> registry.ChainRegistry.Bech32Config
	1,  // 19: registry.ChainRegistry.fees:type_name -> registry.Fees
	4,  // 20: registry.ChainRegistry.staking:type_name -> registry.Staking
	7,  // 21: registry.ChainRegistry.codebase:type_name -> registry.Codebase
	8,  // 22: registry.ChainRegistry.logo_URIs:type_name -> registry.LogoURIs
	9,  // 23: registry.ChainRegistry.images:type_name -> registry.Image
	11, // 24: registry.ChainRegistry.peers:type_name -> registry.Peers
	12, // 25: registry.ChainRegistry.apis:type_name -> registry.APIs
	13, // 26: registry.ChainRegistry.explorers:type_name -> registry.Explorer
	15, // 27: registry.ChainAsset.denom_units:type_name -> registry.DenomUnit
	8,  // 28: registry.ChainAsset.logo_URIs:type_name -> registry.LogoURIs
	16, // 29: registry.AssetList.assets:type_name -> registry.ChainAsset
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_registry_chain_proto_init() }
func file_registry_chain_proto_init() {
	if File_registry_chain_proto != nil {
		return
	}
	file_registry_chain_proto_msgTypes[3].OneofWrappers = []any{
		(*LockDuration_Blocks)(nil),
		(*LockDuration_Time)(nil),
	}
	file_registry_chain_proto_msgTypes[4].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[5].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[6].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[7].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[9].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[10].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[13].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[14].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[16].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[18].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[19].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[20].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[22].OneofWrappers = []any{}
	file_registry_chain_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_registry_chain_proto_rawDesc), len(file_registry_chain_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_registry_chain_proto_goTypes,
		DependencyIndexes: file_registry_chain_proto_depIdxs,
		MessageInfos:      file_registry_chain_proto_msgTypes,
	}.Build()
	File_registry_chain_proto = out.File
	file_registry_chain_proto_goTypes = nil
	file_registry_chain_proto_depIdxs = nil
}
